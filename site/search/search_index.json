{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"BoFoRe Project for Educational practice FSPO ITMO","title":"Home"},{"location":"#bofore","text":"Project for Educational practice FSPO ITMO","title":"BoFoRe"},{"location":"backend/","text":"BoFoRe Backend SCHEME BD Page 1 Scheme BD Models @Entity @Table(name = \"users\") data class User ( @Id @GeneratedValue(strategy = GenerationType.AUTO) val id: Long? = 0, @Column(name=\"username\") var username: String?=null, @Column(name=\"first_name\") var firstName: String?=null, @Column(name=\"last_name\") var lastName: String?=null, @Column(name=\"email\") var email: String?=null, @Column(name=\"password\") var password: String?=null, @Column(name=\"enabled\") var enabled: Boolean = false, @ManyToMany(fetch = FetchType.EAGER) @JoinTable( name = \"users_roles\", joinColumns = [JoinColumn(name = \"user_id\", referencedColumnName = \"id\")], inverseJoinColumns = [JoinColumn(name = \"role_id\", referencedColumnName = \"id\")] ) var roles: Collection<Role>? = null ) @Entity @Table(name = \"roles\") data class Role ( @Id @GeneratedValue(strategy = GenerationType.AUTO) val id: Long, @Column(name=\"name\") val name: String ) @Entity @Table(name = \"bok\") data class Book( @Id @GeneratedValue(strategy = GenerationType.AUTO) var id: Long?, @Column(name = \"author\") var author: String?, @Column(name = \"tittle\") var tittle: String?, @Column(name = \"genre\") var genre: String?, @Column(name=\"comment\") var commenta: String? = null, @Column(name=\"isread\") var isRead: Boolean? = false ) { @ManyToMany(fetch = FetchType.EAGER) @JoinTable( name = \"users_books\", joinColumns = [JoinColumn(name = \"user_id\", referencedColumnName = \"id\")], inverseJoinColumns = [JoinColumn(name = \"book_id\", referencedColumnName = \"id\")] ) var books: Collection<User>? = null } URL's routes: [ { path: '/', name: 'Home', component: Home }, { path: '/home', name: 'Home', component: Home }, { path: '/login', name: 'SignIn', component: SignIn }, { path: '/register', name: 'SignUp', component: SignUp }, { path: '/user', name: 'UserPage', component: UserPage }, { path: '/admin', name: 'AdminPage', component: AdminPage }, { path: '/email', name: 'EmailPage', component: EmailPage }, { path: '/book', name: 'Book', component: BookPage }, { path: '/book/addnew', name: 'AddBook', component: AddBook }, { path: '/book/showall', name: 'SeeBooks', component: SeeBooks }, { path: '/book/rand', name: 'RandBook', component: RandBook }, { path: '/book/allread', name: 'SeeReadBooks', component: SeeReadBooks }, { path: '/book/allnotread', name: 'SeeNotReadBooks', component: SeeNotReadBooks } ] })","title":"Backend"},{"location":"backend/#bofore-backend","text":"","title":"BoFoRe Backend"},{"location":"backend/#scheme-bd","text":"Page 1 Scheme BD","title":"SCHEME BD"},{"location":"backend/#models","text":"@Entity @Table(name = \"users\") data class User ( @Id @GeneratedValue(strategy = GenerationType.AUTO) val id: Long? = 0, @Column(name=\"username\") var username: String?=null, @Column(name=\"first_name\") var firstName: String?=null, @Column(name=\"last_name\") var lastName: String?=null, @Column(name=\"email\") var email: String?=null, @Column(name=\"password\") var password: String?=null, @Column(name=\"enabled\") var enabled: Boolean = false, @ManyToMany(fetch = FetchType.EAGER) @JoinTable( name = \"users_roles\", joinColumns = [JoinColumn(name = \"user_id\", referencedColumnName = \"id\")], inverseJoinColumns = [JoinColumn(name = \"role_id\", referencedColumnName = \"id\")] ) var roles: Collection<Role>? = null ) @Entity @Table(name = \"roles\") data class Role ( @Id @GeneratedValue(strategy = GenerationType.AUTO) val id: Long, @Column(name=\"name\") val name: String ) @Entity @Table(name = \"bok\") data class Book( @Id @GeneratedValue(strategy = GenerationType.AUTO) var id: Long?, @Column(name = \"author\") var author: String?, @Column(name = \"tittle\") var tittle: String?, @Column(name = \"genre\") var genre: String?, @Column(name=\"comment\") var commenta: String? = null, @Column(name=\"isread\") var isRead: Boolean? = false ) { @ManyToMany(fetch = FetchType.EAGER) @JoinTable( name = \"users_books\", joinColumns = [JoinColumn(name = \"user_id\", referencedColumnName = \"id\")], inverseJoinColumns = [JoinColumn(name = \"book_id\", referencedColumnName = \"id\")] ) var books: Collection<User>? = null }","title":"Models"},{"location":"backend/#urls","text":"routes: [ { path: '/', name: 'Home', component: Home }, { path: '/home', name: 'Home', component: Home }, { path: '/login', name: 'SignIn', component: SignIn }, { path: '/register', name: 'SignUp', component: SignUp }, { path: '/user', name: 'UserPage', component: UserPage }, { path: '/admin', name: 'AdminPage', component: AdminPage }, { path: '/email', name: 'EmailPage', component: EmailPage }, { path: '/book', name: 'Book', component: BookPage }, { path: '/book/addnew', name: 'AddBook', component: AddBook }, { path: '/book/showall', name: 'SeeBooks', component: SeeBooks }, { path: '/book/rand', name: 'RandBook', component: RandBook }, { path: '/book/allread', name: 'SeeReadBooks', component: SeeReadBooks }, { path: '/book/allnotread', name: 'SeeNotReadBooks', component: SeeNotReadBooks } ] })","title":"URL's"},{"location":"frontend/","text":"BoFoRe Frontend Main before auth Page 1 Main before auth Register Page 2 Register Login Page 3 Login Main after auth Page 4 After Auth Profile Page 5 Profile Navigation Page 6 Navigation See all books Page 7 See all books Add book Page 8 Add new book Random book Page 9 Randome some book for read See read books Page 10 See read books See not read books Page 11 See not read books","title":"Frontend"},{"location":"frontend/#bofore-frontend","text":"","title":"BoFoRe Frontend"},{"location":"frontend/#main-before-auth","text":"Page 1 Main before auth","title":"Main before auth"},{"location":"frontend/#register","text":"Page 2 Register","title":"Register"},{"location":"frontend/#login","text":"Page 3 Login","title":"Login"},{"location":"frontend/#main-after-auth","text":"Page 4 After Auth","title":"Main after auth"},{"location":"frontend/#profile","text":"Page 5 Profile","title":"Profile"},{"location":"frontend/#navigation","text":"Page 6 Navigation","title":"Navigation"},{"location":"frontend/#see-all-books","text":"Page 7 See all books","title":"See all books"},{"location":"frontend/#add-book","text":"Page 8 Add new book","title":"Add book"},{"location":"frontend/#random-book","text":"Page 9 Randome some book for read","title":"Random book"},{"location":"frontend/#see-read-books","text":"Page 10 See read books","title":"See read books"},{"location":"frontend/#see-not-read-books","text":"Page 11 See not read books","title":"See not read books"}]}